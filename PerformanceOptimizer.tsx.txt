import { useEffect } from 'react';

// Componente para otimização de performance
const PerformanceOptimizer = ({ children }: { children: React.ReactNode }) => {
  useEffect(() => {
    // Adiar carregamento de recursos não críticos
    const deferNonCriticalResources = () => {
      // Adicionar atributo loading="lazy" a todas as imagens que não estão na viewport inicial
      const images = document.querySelectorAll('img:not([loading])');
      images.forEach(img => {
        if (!isInViewport(img)) {
          img.setAttribute('loading', 'lazy');
        }
      });
      
      // Adiar carregamento de iframes
      const iframes = document.querySelectorAll('iframe');
      iframes.forEach(iframe => {
        iframe.setAttribute('loading', 'lazy');
      });
    };
    
    // Verificar se um elemento está na viewport inicial
    const isInViewport = (element: Element) => {
      const rect = element.getBoundingClientRect();
      return (
        rect.top >= 0 &&
        rect.left >= 0 &&
        rect.bottom <= window.innerHeight &&
        rect.right <= window.innerWidth
      );
    };
    
    // Executar otimizações após o carregamento da página
    window.addEventListener('load', deferNonCriticalResources);
    
    return () => {
      window.removeEventListener('load', deferNonCriticalResources);
    };
  }, []);

  return <>{children}</>;
};

export default PerformanceOptimizer;
